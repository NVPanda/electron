From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Charles Kerr <charles@charleskerr.com>
Date: Fri, 15 Dec 2023 18:03:33 -0600
Subject: refactor: update node-platform to match v8-platform API changes

Xref: https://chromium-review.googlesource.com/c/v8/v8/+/4514946
Xref: https://chromium-review.googlesource.com/c/v8/v8/+/4336198

This fixes recent code shear between v8 and Node.js. This patch should
be upstreamed to Node.js and can be removed from Electron's patchset
when Node.js updates to this version of v8 12.2.

diff --git a/src/node_platform.cc b/src/node_platform.cc
index 74ab4a3df8f09b11f0769ba1c56a8c9b0a3f22b0..31d0d011b8c3ab655ae010c0e0199d385fc8e036 100644
--- a/src/node_platform.cc
+++ b/src/node_platform.cc
@@ -496,12 +496,16 @@ bool PerIsolatePlatformData::FlushForegroundTasksInternal() {
   return did_work;
 }
 
-void NodePlatform::CallOnWorkerThread(std::unique_ptr<Task> task) {
+void NodePlatform::PostTaskOnWorkerThreadImpl(v8::TaskPriority /*priority*/,
+                                              std::unique_ptr<v8::Task> task,
+                                              const v8::SourceLocation& /*location*/) {
   worker_thread_task_runner_->PostTask(std::move(task));
 }
 
-void NodePlatform::CallDelayedOnWorkerThread(std::unique_ptr<Task> task,
-                                             double delay_in_seconds) {
+void NodePlatform::PostDelayedTaskOnWorkerThreadImpl(v8::TaskPriority /*priority*/,
+                                                     std::unique_ptr<v8::Task> task,
+                                                     double delay_in_seconds,
+                                                     const v8::SourceLocation& /*location*/) {
   worker_thread_task_runner_->PostDelayedTask(std::move(task),
                                               delay_in_seconds);
 }
@@ -528,8 +532,9 @@ bool NodePlatform::FlushForegroundTasks(Isolate* isolate) {
   return per_isolate->FlushForegroundTasksInternal();
 }
 
-std::unique_ptr<v8::JobHandle> NodePlatform::CreateJob(
-    v8::TaskPriority priority, std::unique_ptr<v8::JobTask> job_task) {
+std::unique_ptr<v8::JobHandle> NodePlatform::CreateJobImpl(v8::TaskPriority priority,
+                                                           std::unique_ptr<v8::JobTask> job_task,
+                                                           const v8::SourceLocation& /*location*/) {
   return v8::platform::NewDefaultJobHandle(
       this, priority, std::move(job_task), NumberOfWorkerThreads());
 }
diff --git a/src/node_platform.h b/src/node_platform.h
index 1062f3b1b9c386a7bde8dca366c6f008bb183ab7..3363219d01f61e82b74b0e1f5a1c3f093e675a3e 100644
--- a/src/node_platform.h
+++ b/src/node_platform.h
@@ -147,18 +147,21 @@ class NodePlatform : public MultiIsolatePlatform {
 
   // v8::Platform implementation.
   int NumberOfWorkerThreads() override;
-  void CallOnWorkerThread(std::unique_ptr<v8::Task> task) override;
-  void CallDelayedOnWorkerThread(std::unique_ptr<v8::Task> task,
-                                 double delay_in_seconds) override;
+  void PostTaskOnWorkerThreadImpl(v8::TaskPriority priority,
+                                  std::unique_ptr<v8::Task> task,
+                                  const v8::SourceLocation& location) override;
+  void PostDelayedTaskOnWorkerThreadImpl(v8::TaskPriority priority,
+                                         std::unique_ptr<v8::Task> task,
+                                         double delay_in_seconds,
+                                         const v8::SourceLocation& location) override;
   bool IdleTasksEnabled(v8::Isolate* isolate) override;
   double MonotonicallyIncreasingTime() override;
   double CurrentClockTimeMillis() override;
   v8::TracingController* GetTracingController() override;
   bool FlushForegroundTasks(v8::Isolate* isolate) override;
-  std::unique_ptr<v8::JobHandle> CreateJob(
-      v8::TaskPriority priority,
-      std::unique_ptr<v8::JobTask> job_task) override;
-
+  std::unique_ptr<v8::JobHandle> CreateJobImpl(v8::TaskPriority priority,
+                                               std::unique_ptr<v8::JobTask> job_task,
+                                               const v8::SourceLocation& location) override;
   void RegisterIsolate(v8::Isolate* isolate, uv_loop_t* loop) override;
   void RegisterIsolate(v8::Isolate* isolate,
                        IsolatePlatformDelegate* delegate) override;
